# f문자열 : 문자열과 변수를 섞어서 사용할 수 있다. 값하고 서식하고 같이 찍는다. 값은 매일 달라지지만, 서식은 그대로 있다.
# replace : 치환
str4 = "010-1111-2222"
print(len(str4))

str4 = str4.replace("-", ".")
#str4.replace("-", ".") 이렇게 하면 str4가 가리키는 주소는 010-1111-2222 그대로다. 
# 문자열 치환은 값을 바꾸는 것이 아니라 데이터를 새롭게 생성하고 str4의 값의 주소를 바꾸는 것이다.
# 즉, 그냥 새로 다시 만든다(문자열을 하나 다시 만든다.). 그렇기 때문에 원본은 그대로 있다. 값이 2개가 되고, 변수는 주소를 지정만하는 것이다.

# 문자열을 변수에 넣는 것이 아니라. 위치를 변수에 넣는 것이다. (가리킨다.) c부터 내려온 방식이다. 

# 그래서 문자열은 대입을 꼭 해야한다. 
# 하는 이유) 크기는 크고, 변경은 잘 하지 않아서다. 

"""
매우 중요하다. 
이무기라는 문자가 있다.

a = "이무기"
b = "이무기"


(문자열은 수정 불가능하다.)
만약에) a가 !를 추가하고 나서 b를 출력하면 이무기!가 출력된다. 
        바뀌면 싹다 바뀌기 때문이다. 그래서 문자열은 바뀌지 않게 만든 것이다.
        (주소값을 변수에 저장하는 것이다.)
        
        
        
        요약 정리!!!!!!!!
        대부분의 언어에서 문자열은 불변(immutable)이다. 즉, 한번 생성하면 변경이 불가능하다는 의미다.
        왜냐하면 사람들이 페이지에 작성된 뉴스같은 것을 수정을 하면 다른 사용자들은 누군가에 의해 수정된 뉴스
        를 보기 때문이다. 그렇기때문에 문자열은 수정이 불가능하게 만든 것이다. 그걸 immutable 불변이라고 한다.

        또한 문자열은 데이터를 변수에 저장하는 것이 아니라, 그 값의 주소값을 변수에 저장하는 것이다. 그래서 데이터는 
        그대로 있고, 주소값을 가지고 그 데이터를 찾아 출력하는 것이다. 

        근데, print("str" + "ing") 같은 경우는 string으로 출력이 된다. 이것은 수정이되는 것 아닌가?
       
         아니다! 이것은 원본을 수정한 것이 아닌, 새롭게 만든 것이다. 즉, 데이터가 하나 더 생겼다는 의미다.
         이렇게하면 데이터가 2개가 되며, 어떤 주소값을 변수에 정의하냐에 따라 출력값이 달라진다.
        
        문자열은 immutable라고한다. 
        # 문자열 메소드는 새로운 문자열을 만든다.
        대입은 문자열에서 주소를 지정한다는 의미다.
"""




print(str4)

# 왜 바뀌지 않는 것일까? 문자열은 바뀔 수 없다.
# str4.replace() -> 문자열을 치환 
# len -> 단독
# replace -> 단독으로 사용 못함


# 함수 : 소속없는 함수 + 소속있는 메소드 (두루두루 사용이 가능하다.)
# method : 특정 타입 소속 -> 타입은 함수도 가질 수 있다. 

str4 = str4.replace("1111", "xxxx")
print(str4)

# "011203-1234567"
jumin = "011203-1234567"

jumin = jumin.replace(jumin[8:] , "******")
print(f"당신의 주민번호는 {jumin}")

str5 = "  a a a  "
print(str5)
print(str5.strip())

# 맨 앞과 맨 끝의 공백을 지워주는 함수다. 글자와 글자 사이는 내용이라고 생각해서 지우지 않는다. (가운데?)
# 언어에는 문자열을 치환해주는 함수가 있다. -> replace()
# 언어에는 공백을 지워주는 함수가 있다. -> strip()