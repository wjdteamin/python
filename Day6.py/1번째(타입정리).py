# console -> 사용자 입력으로 하는 것
# console을 이쁘게 꾸민게 웹이다. 로직은 그대로다. 근데 view(화면에 보이는 것)가 바뀌는 것이다.
 
# primitive(기본) 타입 확장 -> import
# 타입 : 값을 한개 저장하는 타입 : int, float, str, bool
# 숫자 -> 정수(int), 실수(float)
# 문자열 -> str
# 참거짓 -> bool
# 값을 여러개 저장하는 타입(집합:sequence)

# 어떠한 언어들을 배우든 기본 타입을 먼저 배운다. 거기서 없으면 import해야한다. 
# list ->[1,2,3,4,5] 
# tuple -> (1,2,3,4,5) 읽기전용(구조가 간단하다. 작고 빠르다. list보다)

# list와 tuple은 순서대로 하나씩 읽는다. 그렇게 해주는 것이 for이다. 데이터 개수가 늘어나면 걸리는 시간도 늘어난다.
# 운이 좋으면 빠르게 찾을 수 있고, 나쁘면 마지막까지 다 찾아야한다.

# set -> {1,2,3,4,5} 
# 위치를 계산으로 해서 넣는다. (%10(10으로 나눈 나머지)을 이용해서-> 반드시는 10으로 나누는 것은 아니다.)
# set은 계산을 해서 하기 때문에 빠르게 찾을 수 있다. 겹칠 수 있기 때문에 함수를 잘 만들어야한다. 
# set은 hash로 돌아간다.

# dicitionary 
# 키의 리스트와 값의 리스트를 모아둔 거라 생각하면 편하다.

# ---------------------------------------------------------------------
# 간단 요약 정리
# 순서대로 읽고 쓴다 : list, tuple
# [175, 165, 180]           (175,165,180)
# 계산으로 위치 파악 : set {175, 165, 180} 
# 키와 값의 쌍(pair) : dictionary
# {'홍길동' : 175, '전우치' : 165, '임꺽정' : 180}

# 속도는 N이라고 한다. N은 데이터의 개수다. -> list, tuple
# set은 계산으로 하기 때문에 속도가 일정하다.(미세하게 다를 수 있다.) -> 무조건 빠른 것은 아니다. 데이터 개수가 적으면 손해일 수 있다.



